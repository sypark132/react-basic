{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","habits","map","id","onReset","Component","Navbar","totalCount","App","state","item","setState","filter","handleAdd","Date","now","handleReset","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f09d5a5.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nclass Habit extends PureComponent {\n    //라이프사이클 메서드\n    componentDidMount() {\n        //컴포넌트가 사용자에게 보여졌을 때 호출 됨.\n        console.log(`habit: ${this.props.habit.name} mounted`)\n    }\n\n    componentWillUnmount() {\n        //컴포넌트가 지워지기 전에 호출 됨.\n        console.log(`habit: ${this.props.habit.name} will unmount`)\n    }\n\n    handleIncrement = () => {\n        //state 오브젝트 안에 있는 count를 증가시킨 뒤 state 업데이트 해야 함.\n        //state를 업데이트 할 때에는 리액트에서 제공하는 setState 함수를 호출해야 함.\n        //this.setState({count: this.state.count + 1})\n        this.props.onIncrement(this.props.habit);\n    }\n    handleDecrement = () => {\n        // const count = this.state.count -1;\n        // this.setState({count: count < 0 ? 0 : count})\n        this.props.onDecrement(this.props.habit);\n    }\n\n    handleDelete = () => {\n        this.props.onDelete(this.props.habit);\n    }\n\n    render() {\n        //외부로부터 받아온 데이터 = props\n        //console.log(this.props.habit);\n        //this.props.habit의 변수 name과 count를 묶어서 사용 가능하다.\n        const {name, count} = this.props.habit;\n        return (\n            <li className=\"habit\">\n                <span className=\"habit-name\">{name}</span>\n                <span className=\"habit-count\">{count}</span>\n                <button className=\"habit-button habit-increase\" onClick={this.handleIncrement}>\n                    <i className=\"fas fa-plus-square\"></i>\n                </button>\n                <button className=\"habit-button habit-decrease\" onClick={this.handleDecrement}>\n                    <i className=\"fas fa-minus-square\"></i>\n                </button>\n                <button className=\"habit-button habit-delete\" onClick={this.handleDelete}>\n                    <i className=\"fas fa-trash\"></i>\n                </button>\n            </li>\n        );\n    }\n}\n\nexport default Habit;","import React, {memo} from 'react';\n\n//함수로 작성하면 this 쓰지 않아도 됨.\n//class에 PureComponent가 있다면 function에는 memo가 같은 역할을 함.\nconst HabitAddForm = memo(props => {\n    //리액트에서는 바로 DOM요소에 접근하지 않고 createRef를 이용해서 멤버변수를 정의한 다음에\n    //해당하는 컴포넌트에 ref로 연결한다.\n    const formRef = React.createRef();\n    const inputRef = React.createRef();\n    \n    const onSubmit = (event) => {\n        //브라우저의 기본 기능 없애기 -> 페이지 리프레쉬 중단!\n        event.preventDefault();\n        const name = inputRef.current.value;\n        name && props.onAdd(name);\n        //this.inputRef.current.value = '';\n        formRef.current.reset();\n    }\n\n    return (\n        <form ref={formRef} className=\"add-form\" onSubmit={onSubmit}>\n            <input \n                ref={inputRef} \n                type=\"text\" \n                className=\"add-input\" \n                placeholder=\"Habit\" \n            />\n            <button className=\"add-button\">Add</button>\n        </form>\n    );\n});\n\nexport default HabitAddForm;","import React, { Component } from 'react';\nimport Habit from './habit';\nimport HabitAddForm from './habitAddForm';\n\nclass Habits extends Component {\n    render() {\n        return (\n            //Habit 컴포넌트에 habit을 전달하면 props라는 object로 묶여서 전달 됨.\n            //배열을 props로 전달할 때는 고유의 값인 key를 전달해야 한다.\n            //그 경우에 보통 인덱스 번호를 사용하지 않고 자식 컴포넌트에 id값을 직접 부여한 후에\n            //id값을 props로 전달한다.\n            <>\n                <HabitAddForm onAdd={this.props.onAdd} />\n                <ul>\n                    {this.props.habits.map(habit => (\n                        <Habit \n                            key={habit.id} \n                            habit={habit} \n                            onIncrement={this.props.onIncrement}\n                            onDecrement={this.props.onDecrement}\n                            onDelete={this.props.onDelete}\n                        />\n                    ))}\n                </ul>\n                <button className=\"habits-reset\" onClick={this.props.onReset}>Reset All</button>\n            </>\n        );\n    }\n}\n\nexport default Habits;","import React, { PureComponent } from 'react';\n\nclass Navbar extends PureComponent {\n    render() {\n        return (\n            <div className=\"navbar\">\n                <i className=\"navbar-logo fas fa-leaf\"></i>\n                <span>Habit Tracker</span>\n                <span className=\"navbar-count\">{this.props.totalCount}</span>\n            </div>\n        );\n    }\n}\n\nexport default Navbar;","import './app.css';\nimport React, { Component } from 'react';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\n\nclass App extends Component {\n  state = {\n    habits: [\n        {id: 1, name: 'Reading', count: 0},\n        {id: 2, name: 'Running', count: 0},\n        {id: 3, name: 'Coding', count: 0},\n    ],\n  };\n\n  handleIncrement = (habit) => {\n    // console.log(`handleIncrement ${habit.name}`);\n    // //리액트에서는 state 오브젝트를 직접 수정하는 것은 좋지 않다!!\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // habits[index].count++;\n    const habits = this.state.habits.map(item => {\n      if(item.id === habit.id) {\n        return {...habit, count: habit.count + 1};\n      }\n      return item;\n    })\n    //this.setState({habits: habits})인데 key와 value값이 같으면 한 쪽은 생략 가능.\n    this.setState({habits});\n  }\n\n  handleDecrement = (habit) => {\n    // console.log(`handleDecrement ${habit.name}`);\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // const count = habits[index].count - 1;\n    // habits[index].count = count < 0 ? 0 : count;\n    const habits = this.state.habits.map(item => {\n      if(item.id === habit.id) {\n        const count = habit.count - 1;\n        return {...habit, count: count < 0 ? 0 : count};\n      }\n      return item;\n    })\n    this.setState({habits});\n  }\n\n  handleDelete = (habit) => {\n    console.log(`handleDelete ${habit.name}`);\n    const habits = this.state.habits.filter(item => item.id!==habit.id);\n    this.setState({habits});\n  }\n\n  handleAdd = (name) => {\n    const habits = [...this.state.habits, {id: Date.now(), name, count: 0}];\n    this.setState({habits});\n  }\n\n  handleReset = () => {\n    const habits = this.state.habits.map(habit => {\n      // habit.count = 0;\n      // return habit;\n      if(habit.count > 0) { //habit.count !== 0\n        return {...habit, count: 0}\n      }\n      return habit;\n    });\n    this.setState({habits});\n  }\n\n  render() {\n    return (\n      <>\n      <Navbar totalCount={this.state.habits.filter(item => item.count > 0).length}/>\n      <Habits\n        habits={this.state.habits}\n        onIncrement={this.handleIncrement}\n        onDecrement={this.handleDecrement}\n        onDelete={this.handleDelete} \n        onAdd={this.handleAdd}\n        onReset={this.handleReset}\n      />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport SimpleHabit from './components/simpleHabit';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}